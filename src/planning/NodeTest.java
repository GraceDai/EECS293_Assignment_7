import static org.junit.Assert.*;

import org.junit.Test;

public class NodeTest {
	
	/*
	 * getVertex -- autogenerated, doesn't need a test
	 */
	
	/*
	 * setEndTime -- autogenerated, doesn't need a test
	 */
	
	/*
	 * getEndTime -- autogenerated, doesn't need a test
	 */
	
	/*
	 * addIncomingEdge method tests
	 */
	@Test
	//test addIncomingEdge where edge is existent
	public void test_incoming_existent_edge() {	
		Node testFromNode = new Node();
		Node testToNode = new Node();
		Edge edge = new Edge(testFromNode, testToNode, 0);
		
		testFromNode.addIncomingEdge(edge);
		
		assertEquals(edge, testFromNode.getIncomingEdges().get(0));
	}
	
	@Test
	//test addInocmingEdge where edge is null
	public void test_incoming_nonexistent_edge(){
		Node testFromNode = new Node();
		Node testToNode = new Node();	
		Edge nonexistentEdge = null;
		
		testFromNode.addIncomingEdge(nonexistentEdge);
		
		assertEquals(null, testFromNode.getIncomingEdges().get(0));
	}
	
	/*
	 * addOutcomingEdge method tests
	 */
	@Test
	//test addOutcomingEdge where edge is existent
	public void test_outgoing_existent_edge() {	
		Node testFromNode = new Node();
		Node testToNode = new Node();
		Edge edge = new Edge(testFromNode, testToNode, 0);
		
		testFromNode.addOutgoingEdge(edge);
		
		assertEquals(edge, testFromNode.getOutgoingEdges().get(0));
	}
	
	@Test
	//test addOutcomingEde where edge is null
	public void test_outgoing_nonexistent_edge() {	
		Node testFromNode = new Node();
		Node testToNode = new Node();
		Edge edge = null;
		
		testFromNode.addOutgoingEdge(edge);
		
		assertEquals(null, testFromNode.getOutgoingEdges().get(0));
	}
	
	/*
	 * getIncomingEdges -- autogenerated doesn't need test
	 */
	
	/*
	 * getOutgoingEdges -- autogenerted doesn't need test
	 */
	
	/*
	 * isVisiting -- it's a getter doesn't need test
	 */
	
	/*
	 * isVisited -- it's a getter doesn't need test
	 */
	
	/*
	 * setVisiting -- it's an autogenerated setter doesn't need testing
	 */
	
	/*
	 * setVisited -- it's autogenerated doesn't need testing 
	 */
	
	
	
	
	
	
	
}
